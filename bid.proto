syntax = "proto3";
package rusk;
option go_package = "github.com/dusk-network/rusk-schema;rusk";

import "basic_fields.proto";
import "keys.proto";
import "transaction.proto";

// Bid representation
message Bid {
    PoseidonCipher encrypted_data = 1;
    BlsScalar hashed_secret = 2;
    BlsScalar nonce = 3;
    StealthAddress pk_r = 4;
    JubJubCompressed commitment = 5;
    BlsScalar elegibility_ts = 6;
    BlsScalar expiration_ts = 7;
}

// Used to Request the creation of a Bid
message BidTransactionRequest {
    BlsScalar k = 1;
    uint64 value = 2;
    JubJubCompressed secret = 3;
    StealthAddress pk_r = 4;
    BlsScalar seed = 5;
    fixed64 latest_consensus_round = 6;
    fixed64 latest_consensus_step = 7;
}

message BidTransaction {
    uint64 bid_tree_storage_index = 1;
    Transaction tx = 2;
}

message FindBidRequest {
    StealthAddress addr = 1;
}

message BidList {
    repeated Bid bid_list = 1;
    repeated BlsScalar bid_hash_list = 2;
}

message WithdrawBidTransactionRequest {
    JubJubCompressed pk = 1;
    bytes sig = 2;
    fixed64 bid_tree_storage_index = 3;
}

message ExtendBidRequest {
    JubJubCompressed pk = 1;
    bytes sig = 2;
}

service BidService {
    // Generate a new Bid and a proof of it's correctness.
    rpc NewBid(BidTransactionRequest) returns (BidTransaction) {}
    // Look for your owned Bids and return a list of them and it's hash repr
    rpc FindBid(FindBidRequest) returns (BidList) {}
    // Request a withdraw of a Bid. 
    rpc NewWithdrawBid(WithdrawBidTransactionRequest) returns (Transaction) {}
    // Extend a currently active Bid.
    rpc ExtendBid(ExtendBidRequest) returns (Transaction) {}
}
